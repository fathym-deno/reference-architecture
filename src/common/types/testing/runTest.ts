import { assertEquals } from "./.deps.ts";
import type { AssertEquals } from "./AssertEquals.ts";

/**
 * `runTest<TResult, TExpected>` is a generic test helper function designed to verify
 * type assertions and runtime equality in TypeScript. It takes in a result and expected
 * value, ensuring that the types match at compile-time and values match at runtime.
 *
 * This function is useful when testing complex type transformations, unions, intersections,
 * or ensuring that type utilities behave as expected. It supports TypeScript's strong
 * type-checking by enforcing that `TExpected` extends `TResult`.
 *
 * @template TResult - The actual result type generated by the utility or transformation.
 * @template TExpected - The expected type, which must extend `TResult`.
 *
 * @param result - The actual result value to be compared.
 * @param expected - The expected value, which is asserted to extend `TResult`.
 *
 * @throws Will throw an error if the `result` does not match the `expected` value at runtime.
 *         Type mismatches will also be caught at compile-time via TypeScript's type system.
 *
 * @example
 * // Usage for simple type checks
 * type Result = HasTypeCheck<{ a: string }, { a: string }, true>;
 * type Expected = true;
 *
 * runTest<Result, Expected>(true, true); // Test will pass
 *
 * @example
 * // Usage for union types
 * type Result = HasTypeCheck<{ a: string } | { b: number }, { a: string }, false>;
 * type Expected = true;
 *
 * runTest<Result, Expected>(true, true); // Test will pass
 *
 * @example
 * // Type mismatch will cause a compile-time error
 * type MismatchResult = HasTypeCheck<{ a: string }, { b: number }, true>;
 * type MismatchExpected = true;
 *
 * // runTest<MismatchResult, MismatchExpected>(false, true); // Compile-time error
 */
export function runTest<TResult, TExpected extends TResult>(
  result: TResult,
  expected: TExpected,
) {
  const check: TResult = expected;
  assertEquals(result, check);

  type AssertTest = AssertEquals<TResult, TExpected>; // Expect: true
  const assertTest: AssertTest = true as AssertTest;

  assertEquals(assertTest, true);
}
